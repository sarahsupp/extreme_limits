require(gridExtra)
ggplot(yearly.molt.stat[complete.cases(yearly.molt.stat),], aes(yearly.Te.10C.q, MOLT.quant.50)) + geom_point() + theme_bw() + facet_wrap(~LOC) + stat_smooth(method="lm", aes(group=1))
ggplot(yearly.molt.stat[complete.cases(yearly.molt.stat),], aes(winterNDVI, MOLT.quant.50)) + geom_point() +
theme_bw() + facet_wrap(~LOC) + stat_smooth(method="lm", aes(group=1))
#overall response
p1 <- ggplot(yearly.molt.stat[complete.cases(yearly.molt.stat),], aes(yearly.Te.10C.q, MOLT.quant.50)) + geom_point() + theme_classic() + theme(text = element_text(size=15)) + stat_smooth(method="lm", aes(group=1), col="black") + ylab("Molt\n") + xlab("")
p2 <- ggplot(yearly.molt.stat[complete.cases(yearly.molt.stat),], aes(winterNDVI, MOLT.quant.50)) + geom_point() + theme_classic() + theme(text = element_text(size=15)) + stat_smooth(method="lm", aes(group=1), col="black") + ylab("") + xlab("")
```
Load a function ('mod.evaluation') to evaluate hierarchical models
````{r}
source('/Users/mcwlim/Desktop/GitHub/extreme_limits/Model_evaluation_v4_ml.r')
````
Using  function evaluate hierarchical models of median Molt stage (50th Percentile of Molt) as a
linear function of annual physiological demand and resource availability, allowing for a
random intercept associated with 'site'
Binomial, using winterNDVI as resource AVAILABILITY
````{r}
attach(yearly.molt.stat)
#http://www.quantpsy.org/interact/interactions.htm
mod.evaluation(yname='MOLT.quant.50', centering='CGM', stand=T, ordered.fac.treatment = "as.binomial",
log.D=T, R="winterNDVI", D="yearly.Te.10C.q")
detach(yearly.molt.stat)
````
Using function evaluate hierarchical models of 25th percentile Molt stage as a linear function of annual physiological demand and resource availability, allowing for a random intercept associated with 'site'
Binomial, using winter NDVI as resource AVAILABILITY
````{r}
attach(yearly.molt.stat)
#http://www.quantpsy.org/interact/interactions.htm
mod.evaluation(yname='MOLT.quant.25', centering='CGM', stand=T, ordered.fac.treatment = "as.binomial",
log.D=T, R="winterNDVI", D="yearly.Te.10C.q")
detach(yearly.molt.stat)
````
Using  function evaluate hierarchical models of median Molt stage (75th Percentile of Molt) as a
linear function of annual physiological demand and resource availability, allowing for a
random intercept associated with 'site'
Binomial, using winterNDVI as resource AVAILABILITY
````{r}
attach(yearly.molt.stat)
#http://www.quantpsy.org/interact/interactions.htm
mod.evaluation(yname='MOLT.quant.75', centering='CGM', stand=T, ordered.fac.treatment = "as.binomial",
log.D=T, R="winterNDVI", D="yearly.Te.10C.q")
detach(yearly.molt.stat)
````
Model Arrival Variation
========================================================
This document describes the model of Arrival/catch observed in Arizona and how it covaries with energetic demand and resource availability in Mexican wintering grounds
```{r}
#load the Hummingbird arrival data; i.e. the d.f. yearly.catch.stat
load("/Users/mcwlim/Desktop/GitHub/extreme_limits/data/yearly.catch.stat.rdata")
```
```{r}
#Calculate quantiles of arrival distribution per site & year ('sess.quant...'). quant.50 indicates the median arrival date at a given site and year.
#note that in the sess.quant variables the year is irrelevant
require(ggplot2)
yearly.catch.stat$sess.quant.05 <- as.Date(yearly.catch.stat$sess.quant.05, origin="2015-01-01")
yearly.catch.stat$sess.quant.25 <- as.Date(yearly.catch.stat$sess.quant.25, origin="2015-01-01")
yearly.catch.stat$sess.quant.50 <- as.Date(yearly.catch.stat$sess.quant.50, origin="2015-01-01")
yearly.catch.stat$sess.quant.75 <- as.Date(yearly.catch.stat$sess.quant.75, origin="2015-01-01")
yearly.catch.stat$sess.quant.95 <- as.Date(yearly.catch.stat$sess.quant.95, origin="2015-01-01")
ggplot(yearly.catch.stat, aes(yr, sess.quant.50)) + geom_point(aes(size=n.birds)) + theme_bw() +
stat_smooth() + scale_x_continuous(breaks=c(2001:2012))
range(yearly.catch.stat$sess.quant.50)
mean(yearly.catch.stat$sess.quant.50)
mean(yearly.catch.stat[yearly.catch.stat$yr==2006,]$sess.quant.50)
mean(yearly.catch.stat[yearly.catch.stat$yr==2010,]$sess.quant.50)
```
#Load the yearly climate (and NDVI) data which will serve as predictors and merge it with the arrival/catch metrics in #the data frame 'yearly.catch.stat' to be used for modelling
```{r}
load("/Users/mcwlim/Desktop/GitHub/extreme_limits/data/yearly.climate.rdata")
#gives you yearly.climate
yearly.catch.stat <- merge(yearly.catch.stat, yearly.climate)
```
Plot relationship of NDVI with precipitation and with physiological demand
```{r}
require(ggplot2)
#precipitation correlated with NDVI in winter?
ggplot(yearly.climate, aes(wintercumpre, winterNDVI)) + geom_point() + stat_smooth(method="lm") +
ylab("average winter NDVI") + xlab("cumulative winter precip (mm)") + #geom_text(aes(label=yr)) +
theme_classic() + theme(text = element_text(size=20))
lm1 = lm(winterNDVI ~ wintercumpre, data = yearly.climate)
print(summary(lm1)$r.sq)
#NDVI correlated with physiological demand?
ggplot(yearly.climate, aes(yearly.Te.10C.q, winterNDVI)) + geom_point() + stat_smooth(method="lm") +
ylab("average winter NDVI") + xlab("percent days with Te < 10 C") + geom_text(aes(label=yr)) +
theme_classic() + theme(text = element_text(size=20))
lm2 = lm(winterNDVI ~ yearly.Te.10C.q, data = yearly.climate)
print(summary(lm2)$r.sq)
rm(yearly.climate)
```
Plot arrival responses to a proxy for physiological (yearly.Te.10C.q) demand and resrouce availability (NDVI)
```{r fig.width=7, fig.height=6, warning=FALSE}
require(lattice)
require(latticeExtra)
xyplot(sess.quant.50 ~ yearly.Te.10C.q|LOC, data=yearly.catch.stat) + layer(panel.smoother(x, y, method = "lm"))
xyplot(sess.quant.50 ~ winterNDVI|LOC, data=yearly.catch.stat) + layer(panel.smoother(x, y, method = "lm"))
xyplot(sess.quant.50 ~ yearly.Te.10C.q, data=yearly.catch.stat) + layer(panel.smoother(x, y, method = "lm"))
xyplot(sess.quant.50 ~ winterNDVI, data=yearly.catch.stat) + layer(panel.smoother(x, y, method = "lm"))
```
GGPLOT VERSION: Plot molt responses to a proxy for physiological (yearly.Te.10C.q) demand and resrouce availability (NDVI)
```{r fig.width=7, fig.height=6, warning=FALSE}
require(ggplot2)
require(gridExtra)
ycs_cc = yearly.catch.stat[complete.cases(yearly.catch.stat),]
ggplot(ycs_cc, aes(yearly.Te.10C.q, sess.quant.50)) + geom_point() + theme_bw() +
stat_smooth(method="lm", formula = y ~ x, aes(group=1), data=ycs_cc) +
scale_y_date(limits=c(as.Date("1900-03-23"), as.Date("1900-06-04"))) +
ylab("50th Quantile Arrival Date") +  facet_wrap(~LOC)
ggplot(ycs_cc, aes(winterNDVI, sess.quant.50)) + geom_point() +
theme_bw() + stat_smooth(method="lm", formula = y ~ x, aes(group=1), data=ycs_cc) +
scale_y_date(limits=c(as.Date("1900-03-23"), as.Date("1900-06-04"))) +
ylab("50th Quantile Arrival Date") +  facet_wrap(~LOC)
#overall response
p7 <- ggplot(ycs_cc, aes(yearly.Te.10C.q, sess.quant.50)) + geom_point() + theme_classic() + theme(text = element_text(size=15)) + stat_smooth(method="lm", aes(group=1), col="black") + ylab("Timing of \nspring arrival\n") + xlab("\nPhysiological demand (D)")
p8 <- ggplot(ycs_cc, aes(winterNDVI, sess.quant.50)) + geom_point() + theme_classic() + theme(text = element_text(size=15)) + stat_smooth(method="lm", aes(group=1), col="black") + ylab("") + xlab("\nResource availability (R)")
```
Load a function ('mod.evaluation') to evaluate hierarchical models
````{r}
source('/Users/mcwlim/Desktop/GitHub/extreme_limits/Model_evaluation_v4_ml.r')
````
Using aforementioned function evaluate hierarchical models of median arrival as a linear function of annual physiological demand and resource availability, allowing for a random intercept associated with 'site'
````{r}
attach(yearly.catch.stat)
#http://www.quantpsy.org/interact/interactions.htm
mod.evaluation(yname='sess.quant.50', centering='CGM', stand=T, ordered.fac.treatment = "as.num", log.D=T, R="winterNDVI")
detach(yearly.catch.stat)
````
Using  function evaluate hierarchical models of 25th percentile arrival as a linear function of annual physiological demand and resource availability, allowing for a random intercept associated with 'site'
````{r}
attach(yearly.catch.stat)
#http://www.quantpsy.org/interact/interactions.htm
mod.evaluation(yname='sess.quant.25', centering='CGM', stand=T, ordered.fac.treatment = "as.num", log.D=T, R="winterNDVI")
detach(yearly.catch.stat)
````
Using  function evaluate hierarchical models of 75th percentile arrival as a linear function of annual physiological demand and resource availability, allowing for a random intercept associated with 'site'
````{r}
attach(yearly.catch.stat)
#http://www.quantpsy.org/interact/interactions.htm
mod.evaluation(yname='sess.quant.75', centering='CGM', stand=T, ordered.fac.treatment = "as.num", log.D=T, R="winterNDVI")
detach(yearly.catch.stat)
````
grid.arrange(p1, p2, p3, p4, p5, p6, p7, p8, ncol=2)
jpeg("C:/Users/mcwlim/Dropbox/NASA_Hummingbirds/P4_ExtremeEvents_Susan/P4_Paper_drafts/paper_figures/overallresponses_bw.jpg", height=10, width=8, units="in", res=500)
grid.arrange(p1, p2, p3, p4, p5, p6, p7, p8, ncol=2)
dev.off()
Model Arrival Variation
========================================================
This document describes the model of Arrival/catch observed in Arizona and how it covaries with energetic demand and resource availability in Mexican wintering grounds
```{r}
#load the Hummingbird arrival data; i.e. the d.f. yearly.catch.stat
load("/Users/mcwlim/Desktop/GitHub/extreme_limits/data/yearly.catch.stat.rdata")
```
```{r}
#Calculate quantiles of arrival distribution per site & year ('sess.quant...'). quant.50 indicates the median arrival date at a given site and year.
#note that in the sess.quant variables the year is irrelevant
require(ggplot2)
yearly.catch.stat$sess.quant.05 <- as.Date(yearly.catch.stat$sess.quant.05, origin="2015-01-01")
yearly.catch.stat$sess.quant.25 <- as.Date(yearly.catch.stat$sess.quant.25, origin="2015-01-01")
yearly.catch.stat$sess.quant.50 <- as.Date(yearly.catch.stat$sess.quant.50, origin="2015-01-01")
yearly.catch.stat$sess.quant.75 <- as.Date(yearly.catch.stat$sess.quant.75, origin="2015-01-01")
yearly.catch.stat$sess.quant.95 <- as.Date(yearly.catch.stat$sess.quant.95, origin="2015-01-01")
ggplot(yearly.catch.stat, aes(yr, sess.quant.50)) + geom_point(aes(size=n.birds)) + theme_bw() +
stat_smooth() + scale_x_continuous(breaks=c(2001:2012))
range(yearly.catch.stat$sess.quant.50)
mean(yearly.catch.stat$sess.quant.50)
mean(yearly.catch.stat[yearly.catch.stat$yr==2006,]$sess.quant.50)
mean(yearly.catch.stat[yearly.catch.stat$yr==2010,]$sess.quant.50)
```
#Load the yearly climate (and NDVI) data which will serve as predictors and merge it with the arrival/catch metrics in #the data frame 'yearly.catch.stat' to be used for modelling
```{r}
load("/Users/mcwlim/Desktop/GitHub/extreme_limits/data/yearly.climate.rdata")
#gives you yearly.climate
yearly.catch.stat <- merge(yearly.catch.stat, yearly.climate)
```
Plot relationship of NDVI with precipitation and with physiological demand
```{r}
require(ggplot2)
#precipitation correlated with NDVI in winter?
ggplot(yearly.climate, aes(wintercumpre, winterNDVI)) + geom_point() + stat_smooth(method="lm") +
ylab("average winter NDVI") + xlab("cumulative winter precip (mm)") + #geom_text(aes(label=yr)) +
theme_classic() + theme(text = element_text(size=20))
lm1 = lm(winterNDVI ~ wintercumpre, data = yearly.climate)
print(summary(lm1)$r.sq)
#NDVI correlated with physiological demand?
ggplot(yearly.climate, aes(yearly.Te.10C.q, winterNDVI)) + geom_point() + stat_smooth(method="lm") +
ylab("average winter NDVI") + xlab("percent days with Te < 10 C") + geom_text(aes(label=yr)) +
theme_classic() + theme(text = element_text(size=20))
lm2 = lm(winterNDVI ~ yearly.Te.10C.q, data = yearly.climate)
print(summary(lm2)$r.sq)
rm(yearly.climate)
```
Plot arrival responses to a proxy for physiological (yearly.Te.10C.q) demand and resrouce availability (NDVI)
```{r fig.width=7, fig.height=6, warning=FALSE}
require(lattice)
require(latticeExtra)
xyplot(sess.quant.50 ~ yearly.Te.10C.q|LOC, data=yearly.catch.stat) + layer(panel.smoother(x, y, method = "lm"))
xyplot(sess.quant.50 ~ winterNDVI|LOC, data=yearly.catch.stat) + layer(panel.smoother(x, y, method = "lm"))
xyplot(sess.quant.50 ~ yearly.Te.10C.q, data=yearly.catch.stat) + layer(panel.smoother(x, y, method = "lm"))
xyplot(sess.quant.50 ~ winterNDVI, data=yearly.catch.stat) + layer(panel.smoother(x, y, method = "lm"))
```
GGPLOT VERSION: Plot molt responses to a proxy for physiological (yearly.Te.10C.q) demand and resrouce availability (NDVI)
```{r fig.width=7, fig.height=6, warning=FALSE}
require(ggplot2)
require(gridExtra)
ycs_cc = yearly.catch.stat[complete.cases(yearly.catch.stat),]
ggplot(ycs_cc, aes(yearly.Te.10C.q, sess.quant.50)) + geom_point() + theme_bw() +
stat_smooth(method="lm", formula = y ~ x, aes(group=1), data=ycs_cc) +
scale_y_date(limits=c(as.Date("1900-03-23"), as.Date("1900-06-04"))) +
ylab("50th Quantile Arrival Date") +  facet_wrap(~LOC)
ggplot(ycs_cc, aes(winterNDVI, sess.quant.50)) + geom_point() +
theme_bw() + stat_smooth(method="lm", formula = y ~ x, aes(group=1), data=ycs_cc) +
scale_y_date(limits=c(as.Date("1900-03-23"), as.Date("1900-06-04"))) +
ylab("50th Quantile Arrival Date") +  facet_wrap(~LOC)
#overall response
p7 <- ggplot(ycs_cc, aes(yearly.Te.10C.q, sess.quant.50)) + geom_point() + theme_classic() + theme(text = element_text(size=15)) + stat_smooth(method="lm", aes(group=1), col="black") + ylab("Timing of \nspring arrival\n") + xlab("\nPhysiological demand (D)")
p8 <- ggplot(ycs_cc, aes(winterNDVI, sess.quant.50)) + geom_point() + theme_classic() + theme(text = element_text(size=15)) + stat_smooth(method="lm", aes(group=1), col="black") + ylab("") + xlab("\nResource availability (R)")
```
Load a function ('mod.evaluation') to evaluate hierarchical models
````{r}
source('/Users/mcwlim/Desktop/GitHub/extreme_limits/Model_evaluation_v4_ml.r')
````
Using aforementioned function evaluate hierarchical models of median arrival as a linear function of annual physiological demand and resource availability, allowing for a random intercept associated with 'site'
````{r}
attach(yearly.catch.stat)
#http://www.quantpsy.org/interact/interactions.htm
mod.evaluation(yname='sess.quant.50', centering='CGM', stand=T, ordered.fac.treatment = "as.num", log.D=T, R="winterNDVI")
detach(yearly.catch.stat)
````
Using  function evaluate hierarchical models of 25th percentile arrival as a linear function of annual physiological demand and resource availability, allowing for a random intercept associated with 'site'
````{r}
attach(yearly.catch.stat)
#http://www.quantpsy.org/interact/interactions.htm
mod.evaluation(yname='sess.quant.25', centering='CGM', stand=T, ordered.fac.treatment = "as.num", log.D=T, R="winterNDVI")
detach(yearly.catch.stat)
````
Using  function evaluate hierarchical models of 75th percentile arrival as a linear function of annual physiological demand and resource availability, allowing for a random intercept associated with 'site'
````{r}
attach(yearly.catch.stat)
#http://www.quantpsy.org/interact/interactions.htm
mod.evaluation(yname='sess.quant.75', centering='CGM', stand=T, ordered.fac.treatment = "as.num", log.D=T, R="winterNDVI")
detach(yearly.catch.stat)
````
Model Molt Variation
========================================================
This document describes the model of Molt observed in Arizona and how it covaries with energetic demand and resource availability in Mexican wintering grounds
```{r}
library(ggplot2)
#load the Hummingbird data; i.e. the d.f. site.dat
load("/Users/mcwlim/Desktop/GitHub/extreme_limits/data/site.dat.rdata")
#keep only the variables you need
site.dat <- site.dat[, c("LOC", "PriMary.Molt", "yearfac", "mofac")]
#make an ordered categorical variable describing primary molt
ordermolt <- function(x){ordered(x, levels=c("M","R",1:8,0,9,"F","L"))}
site.dat$PriMary.Molt <- ordermolt(site.dat$PriMary.Molt)
hist(as.numeric(site.dat$PriMary.Molt),col="grey80", xlim = c(0,14), breaks = seq(0.5,14.5, by=1), main = "Primary Molt")
#plot molt stage by year for comparison
sd <- site.dat[complete.cases(site.dat),]
ggplot(sd, aes(PriMary.Molt)) + geom_histogram() + facet_wrap(~yearfac) + theme_bw() + xlab("Primary Molt Stage") +
ylab("number birds")
```
```{r}
#Calculate quantiles of molt distribution per site & year ('Molt.quant...'). quant.50 indicates the median molt stage at a given site and year
getMOLTquant <- function(quantile.){
tapply(site.dat$PriMary.Molt, INDEX=list(site.dat$LOC, site.dat$yearfac),
FUN=quantile, type=1, probs=c(quantile.), na.rm=T)}
MOLT.quant.05 <- ordermolt(levels(site.dat$PriMary.Molt)[as.vector(getMOLTquant(.05))])
MOLT.quant.25 <- ordermolt(levels(site.dat$PriMary.Molt)[as.vector(getMOLTquant(.25))])
MOLT.quant.50 <- ordermolt(levels(site.dat$PriMary.Molt)[as.vector(getMOLTquant(.50))])
MOLT.quant.75 <- ordermolt(levels(site.dat$PriMary.Molt)[as.vector(getMOLTquant(.75))])
MOLT.quant.95 <- ordermolt(levels(site.dat$PriMary.Molt)[as.vector(getMOLTquant(.95))])
MOLT.quants <- cbind.data.frame(MOLT.quant.05, MOLT.quant.25, MOLT.quant.50, MOLT.quant.75, MOLT.quant.95)
rm(MOLT.quant.05, MOLT.quant.25, MOLT.quant.50, MOLT.quant.75, MOLT.quant.95)
# calculate variables to hold the site names ('LOC') and years ('yr') associated with the quantiles
quant.temp <- tapply(site.dat$PriMary.Molt, INDEX=list(site.dat$LOC, site.dat$yearfac),
FUN=quantile, type=1, probs=c(.05), na.rm=T)
LOC <- rownames(quant.temp)
yr <- rep(colnames(quant.temp), each=length(LOC))
rm(quant.temp)
# calculate the nr of birds in each sample ('n.birds') (number of birds at each site in each year)
n.birds <- as.vector(tapply(site.dat$PriMary.Molt, INDEX=list(site.dat$LOC, site.dat$yearfac),
FUN=function(x){length(which(!is.na(x)))}))
#save the new metrics in the d.f. "MOLT.quants"
MOLT.quants <- cbind.data.frame(LOC, yr, n.birds, MOLT.quants)
rm(n.birds, LOC, yr)
```
Plot the range, mean, and sd for each year for molt quant 50, for the manuscript
```{r}
mq50 <- MOLT.quants[,c(1:3,6)]
mq50 <- mq50[complete.cases(mq50),]
ggplot(mq50, aes(yr, MOLT.quant.50)) + geom_point(aes(size=n.birds)) + theme_bw()
moltscores <- table(mq50$MOLT.quant.50)
moltscores[11] / sum(moltscores)
moltscores[12] / sum(moltscores)
moltscores[13] / sum(moltscores)
# take a weighted average of the discrete classes for the mean molt score
num = sum(moltscores)
p = apply(moltscores, 1, function(x) {x/num} )
index = c(1:length(moltscores))
meanmolt = moltscores[round(sum(index * p))]
```
Load the yearly climate (and NDVI) data which will serve as predictors and merge it with the molt metrics in the data frame 'yearly.molt.stat' to be used for modelling
````{r}
load("/Users/mcwlim/Desktop/GitHub/extreme_limits/data/yearly.climate.rdata")
#gives you yearly.climate
yearly.molt.stat <- merge(x=MOLT.quants,y=yearly.climate,by='yr')
rm(MOLT.quants,yearly.climate)
````
XYPLOT VERSION: Plot molt responses to a proxy for physiological (yearly.Te.10C.q) demand and resrouce availability (NDVI)
```{r fig.width=7, fig.height=6, warning=FALSE}
require(lattice)
require(latticeExtra)
xyplot(MOLT.quant.50 ~ yearly.Te.10C.q|LOC, data=yearly.molt.stat) + layer(panel.smoother(x, y, method = "lm"))
xyplot(MOLT.quant.50 ~ winterNDVI|LOC, data=yearly.molt.stat) + layer(panel.smoother(x, y, method = "lm"))
#overall response
xyplot(MOLT.quant.50 ~ yearly.Te.10C.q, data=yearly.molt.stat) + layer(panel.smoother(x, y, method = "lm"))
xyplot(MOLT.quant.50 ~ winterNDVI, data=yearly.molt.stat) + layer(panel.smoother(x, y, method = "lm"))
```
GGPLOT VERSION: Plot molt responses to a proxy for physiological (yearly.Te.10C.q) demand and resrouce availability (NDVI)
```{r fig.width=7, fig.height=6, warning=FALSE}
require(ggplot2)
require(gridExtra)
ggplot(yearly.molt.stat[complete.cases(yearly.molt.stat),], aes(yearly.Te.10C.q, MOLT.quant.50)) + geom_point() + theme_bw() + facet_wrap(~LOC) + stat_smooth(method="lm", aes(group=1))
ggplot(yearly.molt.stat[complete.cases(yearly.molt.stat),], aes(winterNDVI, MOLT.quant.50)) + geom_point() +
theme_bw() + facet_wrap(~LOC) + stat_smooth(method="lm", aes(group=1))
#overall response
p1 <- ggplot(yearly.molt.stat[complete.cases(yearly.molt.stat),], aes(yearly.Te.10C.q, MOLT.quant.50)) + geom_point() + theme_classic() + theme(text = element_text(size=15)) + stat_smooth(method="lm", aes(group=1), col="black") + ylab("Molt\n") + xlab("")
p2 <- ggplot(yearly.molt.stat[complete.cases(yearly.molt.stat),], aes(winterNDVI, MOLT.quant.50)) + geom_point() + theme_classic() + theme(text = element_text(size=15)) + stat_smooth(method="lm", aes(group=1), col="black") + ylab("") + xlab("")
```
Load a function ('mod.evaluation') to evaluate hierarchical models
````{r}
source('/Users/mcwlim/Desktop/GitHub/extreme_limits/Model_evaluation_v4_ml.r')
````
Using  function evaluate hierarchical models of median Molt stage (50th Percentile of Molt) as a
linear function of annual physiological demand and resource availability, allowing for a
random intercept associated with 'site'
Binomial, using winterNDVI as resource AVAILABILITY
````{r}
attach(yearly.molt.stat)
#http://www.quantpsy.org/interact/interactions.htm
mod.evaluation(yname='MOLT.quant.50', centering='CGM', stand=T, ordered.fac.treatment = "as.binomial",
log.D=T, R="winterNDVI", D="yearly.Te.10C.q")
detach(yearly.molt.stat)
````
Using function evaluate hierarchical models of 25th percentile Molt stage as a linear function of annual physiological demand and resource availability, allowing for a random intercept associated with 'site'
Binomial, using winter NDVI as resource AVAILABILITY
````{r}
attach(yearly.molt.stat)
#http://www.quantpsy.org/interact/interactions.htm
mod.evaluation(yname='MOLT.quant.25', centering='CGM', stand=T, ordered.fac.treatment = "as.binomial",
log.D=T, R="winterNDVI", D="yearly.Te.10C.q")
detach(yearly.molt.stat)
````
Using  function evaluate hierarchical models of median Molt stage (75th Percentile of Molt) as a
linear function of annual physiological demand and resource availability, allowing for a
random intercept associated with 'site'
Binomial, using winterNDVI as resource AVAILABILITY
````{r}
attach(yearly.molt.stat)
#http://www.quantpsy.org/interact/interactions.htm
mod.evaluation(yname='MOLT.quant.75', centering='CGM', stand=T, ordered.fac.treatment = "as.binomial",
log.D=T, R="winterNDVI", D="yearly.Te.10C.q")
detach(yearly.molt.stat)
````
Model Weight Variation
========================================================
This document describes the model of Weight observed in Arizona and how it covaries with energetic demand and resource availability in Mexican wintering grounds
```{r}
#load the Hummingbird data; i.e. the d.f. site.dat
load("/Users/mcwlim/Desktop/GitHub/extreme_limits/data/site.dat.rdata")
```
How does weight vary with fat?
```{r}
#fat classes 0 and P can be lumped
site.dat$Fat[site.dat$Fat=="P"] <- 0
orderfat <- function(x){ordered(x, levels=c(0, "T" ,1:3))}
site.dat$Fat <- orderfat(site.dat$Fat)
plot(site.dat$Weight ~ site.dat$Fat, col="light grey", xlab = "Fat", ylab = "Weight",
pch=19, cex.axis = 2, cex.lab = 2)
mean(site.dat$Weight, na.rm=T)
range(site.dat$Weight, na.rm=T)
sd(site.dat$Weight, na.rm=T)
fatscores <- table(site.dat$Fat)
fatscores[1] / sum(fatscores)
fatscores[3] / sum(fatscores)
```
Weight does not strongly vary with molt
````{r}
ordermolt <- function(x){ordered(toupper(x), levels=c("M","R",1:8,0,9,"F","L"))}
site.dat$PriMary.Molt <- ordermolt(site.dat$PriMary.Molt)
plot(site.dat$Weight ~ site.dat$PriMary.Molt, col="light grey", pch=19,
xlab = "Primary Molt", ylab = "Weight", cex.axis = 2, cex.lab = 2)
````
FYI: How are observations distributed across Molt classes?
```{r}
table(site.dat$PriMary.Molt)
````
Which pairs of primary molt classes differ in weight?
````{r}
tt<-round(sort(TukeyHSD(aov(site.dat$Weight ~ site.dat$PriMary.Molt))[[1]][,4]), 3)
tt[tt<0.2]
````
Which pairs of secondary molt classes differ in weight?
````{r}
site.dat$Secondary.Molt <- ordermolt(site.dat$Secondary.Molt)
plot(site.dat$Weight ~ site.dat$Secondary.Molt, col="light grey", xlab = "Secondary Molt Class", ylab = "Weight",
, cex.axis = 2, cex.lab = 2, pch=19)
table(site.dat$Secondary.Molt)
tt<-round(sort(TukeyHSD(aov(site.dat$Weight ~ site.dat$Secondary.Molt))[[1]][,4]), 3)
tt[tt<.2]
````
Which pairs of body molt classes differ in weight?
````{r}
site.dat$Body.Molt <- ordermolt(site.dat$Body.Molt)
plot(site.dat$Weight ~ site.dat$Body.Molt, col="light grey", xlab="Body Molt Class", ylab="Weight", pch=19,
cex.lab = 2, cex.axis = 2)
table(site.dat$Body.Molt)
tt<-round(sort(TukeyHSD(aov(site.dat$Weight ~ site.dat$Body.Molt))[[1]][,4]),3)
tt[tt<.2]
````
Which pairs of gorget/head molt classes differ in weight?
````{r}
site.dat$Gorget.head.molt <- ordermolt(site.dat$Gorget.head.molt)
plot(site.dat$Weight ~ site.dat$Gorget.head.molt, col="light grey",xlab="gorget head molt", ylab="Weight", pch=19,
cex.lab = 2, cex.axis = 2)
table(site.dat$Gorget.head.molt)
tt<-round(sort(TukeyHSD(aov(site.dat$Weight ~ site.dat$Gorget.head.molt))[[1]][,4]),3)
tt[tt<.2]
````
Which pairs of tail molt classes differ in weight?
````{r}
site.dat$Tail.Molt <- ordermolt(site.dat$Tail.Molt)
plot(site.dat$Weight ~ site.dat$Tail.Molt, col="light grey", xlab="tail molt", ylab="Weight", pch=19,
cex.lab = 2, cex.axis = 2)
table(site.dat$Tail.Molt)
tt<-round(sort(TukeyHSD(aov(site.dat$Weight ~ site.dat$Tail.Molt))[[1]][,4]),3)
tt[tt<.2]
```
Keep only the variables you need for the modelling analysis
```{r}
site.dat <- site.dat[,c("LOC", "Weight", "Fat", "yearfac", "mofac")]
```
Load the yearly climate (and NDVI) data which will serve as predictors and merge it with the weight metrics in the data frame 'yearly.weight.stat' to be used for modelling
````{r}
load("/Users/mcwlim/Desktop/GitHub/extreme_limits/data/yearly.climate.rdata")
#gives you yearly.climate
yearly.weight.stat <- merge(x=site.dat, y=yearly.climate, by.x='yearfac', by.y='yr')
rm(site.dat, yearly.climate)
````
Plot molt responses to a proxy for physiological (yearly.Te.10C.q) demand and resource availability (NDVI)
```{r fig.width=7, fig.height=6, warning=FALSE}
require(lattice)
require(latticeExtra)
xyplot(Weight ~ yearly.Te.10C.q|LOC, data=yearly.weight.stat) + layer(panel.smoother(x, y, method = "lm"))
xyplot(Weight ~ winterNDVI|LOC, data=yearly.weight.stat) + layer(panel.smoother(x, y, method = "lm"))
xyplot(Fat ~ yearly.Te.10C.q|LOC, data=yearly.weight.stat) + layer(panel.smoother(x, y, method = "lm"))
xyplot(Fat ~ winterNDVI|LOC, data=yearly.weight.stat) + layer(panel.smoother(x, y, method = "lm"))
xyplot(Weight ~ yearly.Te.10C.q, data=yearly.weight.stat) + layer(panel.smoother(x, y, method = "lm"))
xyplot(Weight ~ winterNDVI, data=yearly.weight.stat) + layer(panel.smoother(x, y, method = "lm"))
xyplot(Fat ~ yearly.Te.10C.q, data=yearly.weight.stat) + layer(panel.smoother(x, y, method = "lm"))
xyplot(Fat ~ winterNDVI, data=yearly.weight.stat) + layer(panel.smoother(x, y, method = "lm"))
```
GGPLOT VERSION: Plot molt responses to a proxy for physiological (yearly.Te.10C.q) demand and resrouce availability (NDVI)
```{r fig.width=7, fig.height=6, warning=FALSE}
require(ggplot2)
require(gridExtra)
ggplot(yearly.weight.stat[complete.cases(yearly.weight.stat),], aes(yearly.Te.10C.q, Weight)) + geom_point() + theme_bw() + facet_wrap(~LOC) + stat_smooth(method="lm", aes(group=1)) + ylab("body mass (grams)")
ggplot(yearly.weight.stat[complete.cases(yearly.weight.stat),], aes(winterNDVI, Weight)) + geom_point() +
theme_bw() + facet_wrap(~LOC) + stat_smooth(method="lm", aes(group=1)) + ylab("body mass(grams)")
ggplot(yearly.weight.stat[complete.cases(yearly.weight.stat),], aes(yearly.Te.10C.q, Fat)) + geom_point() + theme_bw() + facet_wrap(~LOC) + stat_smooth(method="lm", aes(group=1)) + ylab("fat score")
ggplot(yearly.weight.stat[complete.cases(yearly.weight.stat),], aes(winterNDVI, Fat)) + geom_point() +
theme_bw() + facet_wrap(~LOC) + stat_smooth(method="lm", aes(group=1)) + ylab("fat score")
#overall response
p3 <- ggplot(yearly.weight.stat[complete.cases(yearly.weight.stat),], aes(yearly.Te.10C.q, Weight)) + geom_point() + theme_classic() + theme(text = element_text(size=15)) + stat_smooth(method="lm", aes(group=1), col="black") + ylab("Body mass\n (grams)\n") + xlab("")
p4 <- ggplot(yearly.weight.stat[complete.cases(yearly.weight.stat),], aes(winterNDVI, Weight)) + geom_point() + theme_classic() + theme(text = element_text(size=15)) + stat_smooth(method="lm", aes(group=1), col="black") + ylab("") + xlab("")
p5 <- ggplot(yearly.weight.stat[complete.cases(yearly.weight.stat),], aes(yearly.Te.10C.q, Fat)) + geom_point() + theme_classic() + theme(text = element_text(size=15)) + stat_smooth(method="lm", aes(group=1), col="black") + ylab("Fat score\n") + xlab("")
p6 <- ggplot(yearly.weight.stat[complete.cases(yearly.weight.stat),], aes(winterNDVI, Fat)) + geom_point() + theme_classic() + theme(text = element_text(size=15)) + stat_smooth(method="lm", aes(group=1), col="black") + ylab("") + xlab("")
# Run Weight_model_ml.Rmd, Molt_model_ml.Rmd, and Arrival_model_ml.Rmd to get all the plots and then use grid.arrange to plot them all together.
jpeg("C:/Users/mcwlim/Dropbox/NASA_Hummingbirds/P4_ExtremeEvents_Susan/P4_Paper_drafts/paper_figures/overallresponses_bw.jpg", height=10, width=8, units="in", res=500)
grid.arrange(p1, p2, p3, p4, p5, p6, p7, p8, ncol=2)
dev.off()
```
Load a function ('mod.evaluation') to evaluate hierarchical models
````{r}
source('/Users/mcwlim/Desktop/GitHub/extreme_limits/Model_evaluation_v4_ml.r')
````
Using aforementioned function evaluate hierarchical models of WEIGHT as a linear function of annual physiological demand and resource availability, allowing for a random intercept associated with 'site'
```{r}
attach(yearly.weight.stat)
#http://www.quantpsy.org/interact/interactions.htm
mod.evaluation(yname='Weight', centering='CGM', stand=T, ordered.fac.treatment = "as.num", log.D=T,
R="winterNDVI", D="yearly.Te.10C.q", N=NULL)
detach(yearly.weight.stat)
```
Using the function evaluate hierarchical models of FAT as a linear function of annual physiological demand and resource availability, allowing for a random intercept associated with 'site'
```{r}
attach(yearly.weight.stat)
#http://www.quantpsy.org/interact/interactions.htm
mod.evaluation(yname='Fat', centering='CGM', stand=T, ordered.fac.treatment = "as.num", log.D=T,
R="winterNDVI", D="yearly.Te.10C.q", N=NULL)
detach(yearly.weight.stat)
```
p3 <- ggplot(ycs_cc, aes(yearly.Te.10C.q, sess.quant.50)) + geom_point() + theme_classic() + theme(text = element_text(size=15)) + stat_smooth(method="lm", aes(group=1), col="black") + ylab("Timing of spring arrival\n") + xlab("\nPhysiological demand (D)")
p4 <- ggplot(ycs_cc, aes(winterNDVI, sess.quant.50)) + geom_point() + theme_classic() + theme(text = element_text(size=15)) + stat_smooth(method="lm", aes(group=1), col="black") + ylab("") + xlab("\nResource availability (R)")
p5 <- ggplot(yearly.weight.stat[complete.cases(yearly.weight.stat),], aes(yearly.Te.10C.q, Weight)) + geom_point() + theme_classic() + theme(text = element_text(size=15)) + stat_smooth(method="lm", aes(group=1), col="black") + ylab("Body mass (grams)\n") + xlab("")
p6 <- ggplot(yearly.weight.stat[complete.cases(yearly.weight.stat),], aes(winterNDVI, Weight)) + geom_point() + theme_classic() + theme(text = element_text(size=15)) + stat_smooth(method="lm", aes(group=1), col="black") + ylab("") + xlab("")
p7 <- ggplot(yearly.weight.stat[complete.cases(yearly.weight.stat),], aes(yearly.Te.10C.q, Fat)) + geom_point() + theme_classic() + theme(text = element_text(size=15)) + stat_smooth(method="lm", aes(group=1), col="black") + ylab("Fat score\n") + xlab("")
p8 <- ggplot(yearly.weight.stat[complete.cases(yearly.weight.stat),], aes(winterNDVI, Fat)) + geom_point() + theme_classic() + theme(text = element_text(size=15)) + stat_smooth(method="lm", aes(group=1), col="black") + ylab("") + xlab("")
grid.arrange(p1, p2, p3, p4, p5, p6, p7, p8, ncol=2)
p1 <- ggplot(yearly.molt.stat[complete.cases(yearly.molt.stat),], aes(yearly.Te.10C.q, MOLT.quant.50)) + geom_point() + theme_classic() + theme(text = element_text(size=15)) + stat_smooth(method="lm", aes(group=1), col="black") + ylab("Molt stage\n") + xlab("")
grid.arrange(p1, p2, p3, p4, p5, p6, p7, p8, ncol=2)
jpeg("C:/Users/mcwlim/Dropbox/NASA_Hummingbirds/P4_ExtremeEvents_Susan/P4_Paper_drafts/paper_figures/overallresponses_bw.jpg", height=10, width=8, units="in", res=500)
grid.arrange(p1, p2, p3, p4, p5, p6, p7, p8, ncol=2)
dev.off()
